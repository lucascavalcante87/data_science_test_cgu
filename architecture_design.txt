Arquitetura de Produção: Evolução do Protótipo para Microservices Isolados

Nota: O protótipo é simples (tudo em um app.py), mas em produção adicionamos microservices para isolamento, escalabilidade e manutenção.
Cada microservice roda independentemente, comunicando via API ou message queue (ex.: RabbitMQ).

+---------------------+     +---------------------+     +---------------------+
|                     |     |                     |     |                     |
|  Microservice 1:    |     |  Microservice 2:    |     |  Microservice 3:    |
|  Ingestão de Docs   |<--->|  RAG (Retrieval     |<--->|  Classificação      |
|  (Process Documents)|     |  Augmented Gen)     |     | (Sentiment Analysis)|
|  - Sentence-Transf. |     |  - FAISS Vector DB  |     |  - DistilBERT Model |
|  - Upload/Process   |     |  - GPT-2 Generation |     |  - Output Results   |
|                     |     |                     |     |                     |
+---------------------+     +---------------------+     +---------------------+

         ^                          ^                          ^
         |                          |                          |
         +--------------------------+--------------------------+
                                    |
                                    v
+-----------------------------------------+
|  API Gateway (FastAPI)                  |
|  - Endpoints: /process, /rag, /classify |
+-----------------------------------------+

Componentes Adicionais em Produção:
- Banco de Dados: Para persistência (ex.: PostgreSQL ou MongoDB).
- Orquestração: Kubernetes para deploy de microservices.
- Segurança: Isolamento para evitar falhas em cascata.
