Arquitetura de Produção: Sistema com Microservices Isolados

Nota: O protótipo é simples (tudo em um app.py), mas em produção adicionamos microservices para isolamento, escalabilidade e manutenção. Cada microservice roda independentemente, comunicando via API ou message queue (ex.: RabbitMQ), permitindo escalabilidade horizontal e evitando falhas em cascata.

+---------------------+     +---------------------+     +---------------------+
|                     |     |                     |     |                     |
|  Microservice 1:    |     |  Microservice 2:    |     |  Microservice 3:    |
|  Ingestão de Docs   |<--->|  RAG (Retrieval     |<--->|  Classificação      |
|  (Process Documents)|     |  Augmented Gen)     |     | (Sentiment Analysis)|
|  - Sentence-Transf. |     |  - FAISS Vector DB  |     |  - DistilBERT Model |
|  - Upload/Process   |     |  - GPT-2 Generation |     |  - Output Results   |
|                     |     |                     |     |                     |
+---------------------+     +---------------------+     +---------------------+

                                    |
                                    v
         +--------------------------+--------------------------+
         |                          |                          |
         v                          v                          v

+-----------------------------------------+
|  API Gateway (FastAPI)                  |
|  - Endpoints: /process, /rag, /classify |
+-----------------------------------------+

Componentes Adicionais em Produção:
- Banco de Dados: Para persistência (ex.: PostgreSQL ou MongoDB para metadados e resultados).
- Orquestração: Kubernetes para deploy e gerenciamento de microservices.
- Segurança: Isolamento de redes, autenticação (ex.: JWT) e monitoramento para evitar falhas em cascata.
- Monitoramento: Ferramentas como Prometheus e Grafana para métricas de performance.
